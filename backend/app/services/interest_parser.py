"""Преобразует произвольные интересы пользователя в нормализованные теги."""

from __future__ import annotations

import re
from difflib import get_close_matches
from typing import Iterable, Set


BASE_TAGS = {
    "архитектура",
    "искусство",
    "кофе",
    "сообщество",
    "культура",
    "культурный центр",
    "культурный обмен",
    "вечерний досуг",
    "события",
    "выставка",
    "семья",
    "история",
    "международное",
    "достопримечательность",
    "памятник",
    "мозаика",
    "музей",
    "музыка",
    "природа",
    "панорама",
    "парк",
    "сценическое искусство",
    "публичное искусство",
    "отдых",
    "набережная",
    "наука",
    "городская среда",
    "технологии",
    "театр",
    "прогулка",
    "другое",
}


SYNONYM_MAP = {
    "история": "история",
    "исторический": "история",
    "историческое": "история",
    "исторические": "история",
    "музей": "музей",
    "музеи": "музей",
    "экспозиция": "музей",
    "искусство": "искусство",
    "галерея": "искусство",
    "арт": "искусство",
    "театр": "театр",
    "театры": "театр",
    "сцена": "сценическое искусство",
    "панорама": "панорама",
    "вид": "панорама",
    "виды": "панорама",
    "парк": "парк",
    "сквер": "парк",
    "природа": "природа",
    "зелень": "природа",
    "уличное": "публичное искусство",
    "граффити": "публичное искусство",
    "муралы": "публичное искусство",
    "кофе": "кофе",
    "кофейня": "кофе",
    "кофейни": "кофе",
    "кафе": "отдых",
    "еда": "отдых",
    "кухня": "отдых",
    "семья": "семья",
    "дети": "семья",
    "дружба": "сообщество",
    "друзья": "сообщество",
    "музыка": "музыка",
    "концерт": "музыка",
    "концерты": "музыка",
    "наука": "наука",
    "технологии": "технологии",
    "техника": "технологии",
    "инновации": "технологии",
    "мозаика": "мозаика",
    "скульптура": "памятник",
    "монумент": "памятник",
    "архитектура": "архитектура",
    "здания": "архитектура",
    "улицы": "городская среда",
    "улица": "городская среда",
    "события": "события",
    "фестиваль": "события",
    "фестивали": "события",
    "культура": "культура",
    "культурный": "культура",
    "культурная": "культура",
    "культуры": "культура",
    "центр": "культурный центр",
    "центра": "культурный центр",
    "центре": "культурный центр",
    "дк": "культурный центр",
    "обмен": "культурный обмен",
    "обмена": "культурный обмен",
    "международный": "международное",
    "международная": "международное",
    "международные": "международное",
    "достопримечательность": "достопримечательность",
    "икона города": "достопримечательность",
    "вечер": "вечерний досуг",
    "вечером": "вечерний досуг",
    "прогулка": "прогулка",
    "прогулки": "прогулка",
    "гулять": "прогулка",
    "гуляем": "прогулка",
    "набережная": "набережная",
    "река": "набережная",
    "выставка": "выставка",
    "экспозиции": "выставка",
    "общение": "сообщество",
}


TOKEN_SPLIT_RE = re.compile(r"[\s,/;]+")


def _normalize_token(token: str) -> str:
    cleaned = token.strip().lower()
    return re.sub(r"[^a-zа-я0-9ё]", "", cleaned)


class InterestParser:
    """Maps user-provided interests into normalized tags."""

    def __init__(self) -> None:
        self._known = BASE_TAGS | set(SYNONYM_MAP.values())

    def parse(self, interests: Iterable[str]) -> Set[str]:
        tags: Set[str] = set()
        for interest in interests:
            for token in TOKEN_SPLIT_RE.split(interest):
                if not token:
                    continue
                normalized = _normalize_token(token)
                if not normalized:
                    continue
                direct = SYNONYM_MAP.get(normalized)
                if direct:
                    tags.add(direct)
                    continue
                if normalized in self._known:
                    tags.add(normalized)
                    continue
                close = get_close_matches(normalized, self._known, n=1, cutoff=0.78)
                if close:
                    tags.add(close[0])
        return tags
